[{"/home/connor-linux/Documents/workspace/reviewed-in-anki/src/index.tsx":"1","/home/connor-linux/Documents/workspace/reviewed-in-anki/src/reportWebVitals.ts":"2","/home/connor-linux/Documents/workspace/reviewed-in-anki/src/App.tsx":"3","/home/connor-linux/Documents/workspace/reviewed-in-anki/src/entities/DatabaseContext.ts":"4","/home/connor-linux/Documents/workspace/reviewed-in-anki/src/Panel.tsx":"5","/home/connor-linux/Documents/workspace/reviewed-in-anki/src/InstallPwa.jsx":"6","/home/connor-linux/Documents/workspace/reviewed-in-anki/src/AddToHomeScreenPrompt.jsx":"7"},{"size":500,"mtime":1610746354868,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1610746354868,"results":"10","hashOfConfig":"9"},{"size":4938,"mtime":1610746639455,"results":"11","hashOfConfig":"9"},{"size":507,"mtime":1610746978038,"results":"12","hashOfConfig":"9"},{"size":4258,"mtime":1610747191735,"results":"13","hashOfConfig":"9"},{"size":3432,"mtime":1610747173265,"results":"14","hashOfConfig":"9"},{"size":1404,"mtime":1610807867537,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1looc68",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},"/home/connor-linux/Documents/workspace/reviewed-in-anki/src/index.tsx",[],["34","35"],"/home/connor-linux/Documents/workspace/reviewed-in-anki/src/reportWebVitals.ts",[],"/home/connor-linux/Documents/workspace/reviewed-in-anki/src/App.tsx",["36"],"import React, { useState, Fragment, useEffect } from 'react';\nimport Panel from './Panel';\nimport axios from 'axios';\nimport { ReviewedDb } from './entities/DatabaseContext';\nimport { IReview } from './entities/IReview';\nimport InstallPwa from './InstallPwa';\n\nconst shuffle = (mixMeUp: JSX.Element[]): JSX.Element[] => {\n\tlet currentIndex: number = mixMeUp.length;\n\tlet temporaryValue: JSX.Element;\n\tlet randomIndex: number;\n\n\twhile (currentIndex !== 0) {\n\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\tcurrentIndex -= 1;\n\n\t\ttemporaryValue = mixMeUp[currentIndex];\n\t\tmixMeUp[currentIndex] = mixMeUp[randomIndex];\n\t\tmixMeUp[randomIndex] = temporaryValue;\n\t}\n\n\treturn mixMeUp;\n}\n\nconst App = () => {\n\tconst indexedDb: ReviewedDb = new ReviewedDb();\n\tconst [panels, setPanels] = useState<JSX.Element[]>([]);\n\tconst ankiApiUrl = 'https://192.168.1.3:8765';\n\n\tuseEffect(() => {\n\t\tconst retrieveDataFromAnkiApi = async (numberOfItemsInIndexedDb: number): Promise<string[]> => {\n\t\t\tconsole.log(`retrieveDataFromAnkiApi :: Starting function`);\n\t\t\tlet trends: string[] = [];\n\t\t\tconst cardsReviewedQuery: object = {\n\t\t\t\t\"action\": \"findNotes\",\n\t\t\t\t\"version\": 6,\n\t\t\t\t\"params\": {\n\t\t\t\t\t\"query\": \"rated:7\"\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn await axios.post(ankiApiUrl, cardsReviewedQuery).then(x => {\n\t\t\t\tif (numberOfItemsInIndexedDb > 0 && numberOfItemsInIndexedDb === x.data.result.length) {\n\t\t\t\t\tconsole.log(`retrieveDataFromAnkiApi :: Exiting function :: Same records exist in IndexedDb`);\n\t\t\t\t\treturn ['same-records'];\n\t\t\t\t}\n\t\t\t\tif (numberOfItemsInIndexedDb === 0) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t'No cards studied today.',\n\t\t\t\t\t\t'Nothing found.',\n\t\t\t\t\t\t'Perform a sync if you are expecting results.',\n\t\t\t\t\t\t'Looks like you\\'ve been lazy.'\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t\tconsole.log(`retrieveDataFromAnkiApi :: Exiting function :: Proceed to processCardsReviewed`);\n\t\t\t\treturn processCardsReviewed(x, trends);\n\t\t\t});\n\t\t};\n\t\n\t\tconst processCardsReviewed = async (cardsReviewed: any, trends: string[]): Promise<string[]> => {\n\t\t\tconsole.log(`processCardsReviewed :: Starting function`);\n\t\t\tif (typeof cardsReviewed.data.result === 'undefined' || cardsReviewed.data.result.length === 0) {\n\t\t\t\tconsole.log(`processCardsReviewed :: Exiting function :: No cards returned`);\n\t\t\t\treturn trends;\n\t\t\t}\n\t\t\tconst detailOfCardsReviewed: object = {\n\t\t\t\t\"action\": \"notesInfo\",\n\t\t\t\t\"version\": 6,\n\t\t\t\t\"params\": {\n\t\t\t\t\t\"notes\": cardsReviewed.data.result\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn await axios.post(ankiApiUrl, detailOfCardsReviewed).then(y => {\n\t\t\t\tconsole.log(`processCardsReviewed :: Exiting function :: Proceed to processDetailedCardsReviewed`);\n\t\t\t\treturn processDetailedCardsReviewed(y, trends);\n\t\t\t});\n\t\t}\n\t\n\t\tconst processDetailedCardsReviewed = async (detailsOfCardsReviewed: any, trends: string[]): Promise<string[]> => {\n\t\t\tconsole.log(`processDetailedCardsReviewed :: Starting function`);\n\t\t\tif (typeof detailsOfCardsReviewed.data.result !== 'undefined') {\n\t\t\t\tdetailsOfCardsReviewed.data.result.forEach( (z: any) => {\n\t\t\t\t\tif (typeof z.fields.Hanzi !== 'undefined') {\n\t\t\t\t\t\ttrends.push(z.fields.Hanzi.value);\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof z.fields['Simplified Hanzi'] !== 'undefined') {\n\t\t\t\t\t\ttrends.push(z.fields['Simplified Hanzi'].value);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (trends.length === 0) {\n\t\t\t\tconsole.log('No data returned.');\n\t\t\t\ttrends.push('No cards studied today.');\n\t\t\t\ttrends.push('Nothing found.');\n\t\t\t\ttrends.push('Perform a sync if you are expecting results.');\n\t\t\t\ttrends.push('Looks like you\\'ve been lazy.');\n\t\t\t}\n\t\t\tconsole.log(`processDetailedCardsReviewed :: Exiting function`);\n\t\t\treturn trends;\n\t\t};\n\t\tconst getAnkiData = async (): Promise<void> => {\n\t\t\tconsole.log(`getAnkiData :: Starting function`);\n\t\t\tlet tempPanels: JSX.Element[];\n\t\t\tlet ankiData: string[] = [];\n\t\t\tlet reviews: IReview[];\n\t\t\tlet indexedDbResults: IReview[] = await indexedDb.reviews.toArray();\n\t\t\tankiData = await retrieveDataFromAnkiApi(indexedDbResults.length);\n\t\t\t\n\t\t\tif (ankiData[0] !== 'same-records') {\n\t\t\t\treviews = ankiData.map(x => {\n\t\t\t\t\tlet review: IReview = {\n\t\t\t\t\t\tcreatedTimestamp: Date.now(),\n\t\t\t\t\t\tdisplayContent: x\n\t\t\t\t\t};\n\t\t\t\t\treturn review;\n\t\t\t\t});\n\t\t\t\tindexedDb.reviews.clear();\n\t\t\t\tindexedDb.reviews.bulkAdd(reviews);\n\t\t\t\ttempPanels = reviews.map((value, index) => <Panel key={index} purpose='content' delay={index} cardText={value.displayContent}/>);\n\t\t\t} else {\n\t\t\t\ttempPanels = indexedDbResults.map((value, index) => <Panel key={value.id} purpose='content' delay={index} cardText={value.displayContent}/>);\n\t\t\t}\n\t\t\t\n\t\t\tsetPanels(tempPanels);\n\t\t\tconsole.log(`getAnkiData :: Exiting function`);\n\t\t};\n\t\tgetAnkiData();\n\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, []);\n\n\tconst loadingPanel: JSX.Element = <Panel key={99999} purpose='loading' delay={0} cardText={''}/>\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<InstallPwa database={indexedDb} />\n\t\t\t{loadingPanel}\n\t\t\t{ panels.length < 1 ? <div hidden></div> : panels.map(x => x) }\n\t\t</Fragment>\n\t);\n};\n\nexport default App;","/home/connor-linux/Documents/workspace/reviewed-in-anki/src/entities/DatabaseContext.ts",[],"/home/connor-linux/Documents/workspace/reviewed-in-anki/src/Panel.tsx",[],"/home/connor-linux/Documents/workspace/reviewed-in-anki/src/InstallPwa.jsx",[],["37","38"],"/home/connor-linux/Documents/workspace/reviewed-in-anki/src/AddToHomeScreenPrompt.jsx",["39"],"import { useState, useEffect } from 'react';\n\n/**\n * Prompts the user to install the application.\n */\nconst AddToHomescreenPrompt = (database) => {\n\n    /**\n     * @param { boolean } prompt This constant can change\n     * @param { isTrusted: boolean } prompt This constant can change\n     */\n    const [prompt, setPrompt] = useState(false);\n\n    /**\n     * An identical function exists within app-drawer.js\n     */\n    const promptToInstall = () => {\n        if (prompt) {\n            return prompt.prompt();\n        }\n        return Promise.reject(new Error('Tried installing before browser sent \"beforeinstallprompt\" event'));\n    };\n\n    const initializePreferencesIfNecessary = count => {\n        if (count === 0) {\n            const initialize = {\n                username: 'loganconnor44',\n                promptUserForInstallation: true\n            };\n            database.preferences.put(initialize);\n        }\n    };\n\n    useEffect(() => {\n        database.preferences.count().then(initializePreferencesIfNecessary);\n        \n        const ready = event => {\n            event.preventDefault();\n            setPrompt(event);\n        };\n        window.addEventListener(\"beforeinstallprompt\", ready);\n        return () => {\n            window.removeEventListener(\"beforeinstallprompt\", ready);\n        };\n    }, []);\n\n    return [prompt, promptToInstall];\n};\n\nexport default AddToHomescreenPrompt;",{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":8,"column":7,"nodeType":"46","messageId":"47","endLine":8,"endColumn":14},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"48","severity":1,"message":"49","line":45,"column":8,"nodeType":"50","endLine":45,"endColumn":10,"suggestions":"51"},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"@typescript-eslint/no-unused-vars","'shuffle' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'database.preferences' and 'initializePreferencesIfNecessary'. Either include them or remove the dependency array.","ArrayExpression",["54"],"no-global-assign","no-unsafe-negation",{"desc":"55","fix":"56"},"Update the dependencies array to be: [database.preferences, initializePreferencesIfNecessary]",{"range":"57","text":"58"},[1319,1321],"[database.preferences, initializePreferencesIfNecessary]"]